#!/usr/bin/env node

/**
 * –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ñ–∏–∫—Å–∞—Ü–∏–∏ –æ—à–∏–±–æ–∫ ESLint
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Ö–æ–¥–æ–≤ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ñ–∏–∫—Å–∞—Ü–∏–∏ –æ—à–∏–±–æ–∫
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ö–æ–¥–æ–≤ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫
const MAX_PASSES = 3;

// –ü—Ä–∞–≤–∏–ª–∞, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º --fix
const FIXABLE_RULES = [
  'import/order',
  'import/first',
  'import/newline-after-import',
  'unused-imports/no-unused-imports',
  'prettier/prettier',
  '@typescript-eslint/no-unused-vars',
  '@next/next/no-img-element',
];

// –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å —É—Å–∏–ª–µ–Ω–Ω—ã–º —Ä–µ–∂–∏–º–æ–º –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
function createTemporaryConfig() {
  try {
    const eslintConfigPath = path.resolve(process.cwd(), '.eslintrc.js');
    const originalConfig = require(eslintConfigPath);

    // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏
    const enhancedConfig = JSON.parse(JSON.stringify(originalConfig));

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å 'warn' –¥–ª—è –≤—Å–µ—Ö –ø—Ä–∞–≤–∏–ª, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    FIXABLE_RULES.forEach(rule => {
      if (enhancedConfig.rules && enhancedConfig.rules[rule]) {
        if (Array.isArray(enhancedConfig.rules[rule])) {
          enhancedConfig.rules[rule][0] = 'warn';
        } else {
          enhancedConfig.rules[rule] = 'warn';
        }
      }
    });

    const tempConfigPath = path.resolve(process.cwd(), '.eslintrc.temp.js');
    fs.writeFileSync(tempConfigPath, `module.exports = ${JSON.stringify(enhancedConfig, null, 2)}`);

    return tempConfigPath;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ESLint:', error);
    process.exit(1);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ ESLint —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏
function runEslintFix(configPath = null) {
  try {
    const configArg = configPath ? `--config ${configPath}` : '';
    const command = `npx eslint . --ext .ts,.tsx --fix --max-warnings=9999 ${configArg}`;

    console.log(`–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: ${command}`);
    const output = execSync(command, { encoding: 'utf8' });

    return output;
  } catch (error) {
    console.error('–í—ã–≤–æ–¥ ESLint:');
    console.error(error.stdout);
    return error.stdout || '';
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞
function main() {
  console.log('üîç –ó–∞–ø—É—Å–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ ESLint —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º...');

  // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é ESLint
  const tempConfigPath = createTemporaryConfig();
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ESLint –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è`);

  let pass = 1;
  let previousErrorCount = Infinity;
  let currentErrorCount = Infinity;

  // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Ö–æ–¥–æ–≤ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫
  while (pass <= MAX_PASSES && currentErrorCount > 0 && currentErrorCount < previousErrorCount) {
    console.log(`\nüîÑ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ö–æ–¥–∞ ${pass}/${MAX_PASSES}...`);

    const output = runEslintFix(tempConfigPath);
    previousErrorCount = currentErrorCount;

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –æ—à–∏–±–æ–∫
    const errorMatches = output.match(/(\d+) errors?/);
    currentErrorCount = errorMatches ? parseInt(errorMatches[1], 10) : 0;

    console.log(`üìä –ü—Ä–æ—Ö–æ–¥ ${pass}: –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${currentErrorCount} –æ—à–∏–±–æ–∫`);

    // –ï—Å–ª–∏ –æ—à–∏–±–æ–∫ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
    if (currentErrorCount === 0) {
      console.log('‚ú® –í—Å–µ –æ—à–∏–±–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!');
      break;
    }

    // –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ –Ω–µ —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
    if (currentErrorCount >= previousErrorCount && pass > 1) {
      console.log('‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ –Ω–µ —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è');
      break;
    }

    pass++;
  }

  // –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ö–æ–¥ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
  console.log('\nüßπ –ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–¥–∞ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π...');
  runEslintFix();

  // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
  try {
    fs.unlinkSync(tempConfigPath);
    console.log('üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ESLint —É–¥–∞–ª–µ–Ω–∞');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
  }

  console.log('\n‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è ESLint –∑–∞–≤–µ—Ä—à–µ–Ω!');
}

main();
