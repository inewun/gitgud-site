#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞–∑–º–µ—Ä–∞ –±–∞–Ω–¥–ª–∞ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–µ–≥—Ä–µ—Å—Å–∏–π
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑–º–µ—Ä JS, CSS –∏ –º–µ–¥–∏–∞-—Ñ–∞–π–ª–æ–≤ –ø–æ—Å–ª–µ —Å–±–æ—Ä–∫–∏ –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–æ—Ä–æ–≥–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
 * –ü—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–æ–≤ –≤—ã–≤–æ–¥–∏—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
 *
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * node scripts/bundle-size-analyzer.js --base=historical-sizes.json
 */

const fs = require('fs');
const path = require('path');
const zlib = require('zlib');
const { execSync } = require('child_process');
const minimist = require('minimist');

// –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const args = minimist(process.argv.slice(2));
const baseFile = args.base || 'bundle-size-history.json';
const verbose = args.verbose || false;
const saveHistory = args.save !== false;

// –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–º–µ—Ä–æ–≤ –±–∞–Ω–¥–ª–æ–≤ (–≤ –±–∞–π—Ç–∞—Ö)
const thresholds = {
  // –ü–æ—Ä–æ–≥–∏ –¥–ª—è JS
  js: {
    total: 250 * 1024, // 250 KB
    largest: 50 * 1024, // 50 KB –¥–ª—è —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞
    initial: 120 * 1024, // 120 KB –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞
  },
  // –ü–æ—Ä–æ–≥–∏ –¥–ª—è CSS
  css: {
    total: 80 * 1024, // 80 KB
    largest: 30 * 1024, // 30 KB
  },
  // –ü–æ—Ä–æ–≥–∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  images: {
    total: 200 * 1024, // 200 KB
    largest: 100 * 1024, // 100 KB
  },
  // –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  perPage: {
    js: 150 * 1024, // 150 KB JS –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    css: 50 * 1024, // 50 KB CSS –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    total: 300 * 1024, // 300 KB –≤—Å–µ–≥–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
  },
};

// –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
const directories = {
  js: ['.next/static/chunks', '.next/static/runtime'],
  css: ['.next/static/css'],
  images: ['public'],
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å –∑–∞–¥–∞–Ω–Ω—ã–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
function findFiles(dir, extensions) {
  if (!fs.existsSync(dir)) {
    return [];
  }

  let results = [];
  const list = fs.readdirSync(dir);

  for (const file of list) {
    const filePath = path.join(dir, file);
    const stat = fs.statSync(filePath);

    if (stat.isDirectory()) {
      results = results.concat(findFiles(filePath, extensions));
    } else {
      const ext = path.extname(file).toLowerCase();
      if (extensions.includes(ext)) {
        results.push(filePath);
      }
    }
  }

  return results;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (–æ–±—ã—á–Ω–æ–≥–æ –∏ gzip)
function getFileSize(filePath) {
  if (!fs.existsSync(filePath)) {
    return { size: 0, gzipSize: 0 };
  }

  const content = fs.readFileSync(filePath);
  const size = content.length;
  const gzipSize = zlib.gzipSync(content).length;

  return { size, gzipSize };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ —Ñ–∞–π–ª–æ–≤ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
function getFileSizes(fileType) {
  const dirs = directories[fileType] || [];
  let extensions = [];

  switch (fileType) {
    case 'js':
      extensions = ['.js', '.mjs'];
      break;
    case 'css':
      extensions = ['.css'];
      break;
    case 'images':
      extensions = ['.jpg', '.jpeg', '.png', '.gif', '.svg', '.webp'];
      break;
  }

  let files = [];
  for (const dir of dirs) {
    files = files.concat(findFiles(dir, extensions));
  }

  return files
    .map(file => {
      const { size, gzipSize } = getFileSize(file);
      return {
        path: file,
        name: path.basename(file),
        size,
        gzipSize,
      };
    })
    .sort((a, b) => b.size - a.size); // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
function formatSize(size) {
  if (size < 1024) {
    return `${size} B`;
  } else if (size < 1024 * 1024) {
    return `${(size / 1024).toFixed(2)} KB`;
  } else {
    return `${(size / (1024 * 1024)).toFixed(2)} MB`;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ø–æ—Ä–æ–≥–æ–≤
function checkThresholds(results) {
  const issues = [];

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ JS
  if (results.js.totalSize > thresholds.js.total) {
    issues.push(
      `‚ö†Ô∏è –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä JS (${formatSize(results.js.totalSize)}) –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ø–æ—Ä–æ–≥ ${formatSize(thresholds.js.total)}`,
    );
  }

  if (results.js.largestFile && results.js.largestFile.size > thresholds.js.largest) {
    issues.push(
      `‚ö†Ô∏è –†–∞–∑–º–µ—Ä —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ JS —Ñ–∞–π–ª–∞ (${results.js.largestFile.name}: ${formatSize(results.js.largestFile.size)}) –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ø–æ—Ä–æ–≥ ${formatSize(thresholds.js.largest)}`,
    );
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ CSS
  if (results.css.totalSize > thresholds.css.total) {
    issues.push(
      `‚ö†Ô∏è –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä CSS (${formatSize(results.css.totalSize)}) –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ø–æ—Ä–æ–≥ ${formatSize(thresholds.css.total)}`,
    );
  }

  if (results.css.largestFile && results.css.largestFile.size > thresholds.css.largest) {
    issues.push(
      `‚ö†Ô∏è –†–∞–∑–º–µ—Ä —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ CSS —Ñ–∞–π–ª–∞ (${results.css.largestFile.name}: ${formatSize(results.css.largestFile.size)}) –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ø–æ—Ä–æ–≥ ${formatSize(thresholds.css.largest)}`,
    );
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  if (results.images.totalSize > thresholds.images.total) {
    issues.push(
      `‚ö†Ô∏è –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (${formatSize(results.images.totalSize)}) –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ø–æ—Ä–æ–≥ ${formatSize(thresholds.images.total)}`,
    );
  }

  if (results.images.largestFile && results.images.largestFile.size > thresholds.images.largest) {
    issues.push(
      `‚ö†Ô∏è –†–∞–∑–º–µ—Ä —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (${results.images.largestFile.name}: ${formatSize(results.images.largestFile.size)}) –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ø–æ—Ä–æ–≥ ${formatSize(thresholds.images.largest)}`,
    );
  }

  return issues;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
function compareWithHistory(results, historyFile) {
  if (!fs.existsSync(historyFile)) {
    return { changes: [], hasRegressedFiles: false };
  }

  const history = JSON.parse(fs.readFileSync(historyFile, 'utf8'));
  const lastEntry = history[history.length - 1];

  if (!lastEntry) {
    return { changes: [], hasRegressedFiles: false };
  }

  const changes = [];
  let hasRegressedFiles = false;

  // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –æ–±—â–∏–µ —Ä–∞–∑–º–µ—Ä—ã
  ['js', 'css', 'images'].forEach(type => {
    const currentTotal = results[type].totalSize;
    const previousTotal = lastEntry[type].totalSize;
    const diff = currentTotal - previousTotal;

    if (diff !== 0) {
      const percentChange = ((diff / previousTotal) * 100).toFixed(2);
      const direction = diff > 0 ? '—É–≤–µ–ª–∏—á–∏–ª—Å—è' : '—É–º–µ–Ω—å—à–∏–ª—Å—è';
      changes.push(
        `${type.toUpperCase()}: ${direction} –Ω–∞ ${formatSize(Math.abs(diff))} (${Math.abs(percentChange)}%)`,
      );

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–≥—Ä–µ—Å—Å–∏—é –∫–∞–∫ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –Ω–∞ 10% –∏–ª–∏ –±–æ–ª–µ–µ
      if (diff > 0 && percentChange >= 10) {
        hasRegressedFiles = true;
      }
    }
  });

  return { changes, hasRegressedFiles };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
function updateHistory(results, historyFile) {
  let history = [];

  if (fs.existsSync(historyFile)) {
    history = JSON.parse(fs.readFileSync(historyFile, 'utf8'));
  }

  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
  const newEntry = {
    date: new Date().toISOString(),
    js: {
      totalSize: results.js.totalSize,
      totalGzipSize: results.js.totalGzipSize,
      fileCount: results.js.files.length,
    },
    css: {
      totalSize: results.css.totalSize,
      totalGzipSize: results.css.totalGzipSize,
      fileCount: results.css.files.length,
    },
    images: {
      totalSize: results.images.totalSize,
      fileCount: results.images.files.length,
    },
  };

  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
  history.push(newEntry);
  fs.writeFileSync(historyFile, JSON.stringify(history, null, 2));
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
function generateReport(results, issues, comparison) {
  console.log('\nüì¶ –û—Ç—á–µ—Ç –ø–æ —Ä–∞–∑–º–µ—Ä—É –±–∞–Ω–¥–ª–∞\n');

  // –û–±—â–∏–µ —Ä–∞–∑–º–µ—Ä—ã
  console.log('–û–±—â–∏–µ —Ä–∞–∑–º–µ—Ä—ã:');
  console.log(
    `  JS: ${formatSize(results.js.totalSize)} (gzip: ${formatSize(results.js.totalGzipSize)})`,
  );
  console.log(
    `  CSS: ${formatSize(results.css.totalSize)} (gzip: ${formatSize(results.css.totalGzipSize)})`,
  );
  console.log(`  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${formatSize(results.images.totalSize)}`);
  console.log(
    `  –í—Å–µ–≥–æ: ${formatSize(results.js.totalSize + results.css.totalSize + results.images.totalSize)}`,
  );

  // –°–∞–º—ã–µ –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã
  if (verbose) {
    console.log('\n–°–∞–º—ã–µ –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã:');

    if (results.js.largestFile) {
      console.log(
        `  JS: ${results.js.largestFile.name} - ${formatSize(results.js.largestFile.size)} (gzip: ${formatSize(results.js.largestFile.gzipSize)})`,
      );
    }

    if (results.css.largestFile) {
      console.log(
        `  CSS: ${results.css.largestFile.name} - ${formatSize(results.css.largestFile.size)} (gzip: ${formatSize(results.css.largestFile.gzipSize)})`,
      );
    }

    if (results.images.largestFile) {
      console.log(
        `  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${results.images.largestFile.name} - ${formatSize(results.images.largestFile.size)}`,
      );
    }
  }

  // –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
  if (comparison.changes.length > 0) {
    console.log('\n–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:');
    comparison.changes.forEach(change => {
      console.log(`  ${change}`);
    });
  }

  // –ü—Ä–æ–±–ª–µ–º—ã –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
  if (issues.length > 0) {
    console.log('\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:');
    issues.forEach(issue => {
      console.log(`  ${issue}`);
    });

    console.log('\nüîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:');
    console.log(
      '  - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∫–æ–¥–∞ (code splitting) –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏',
    );
    console.log('  - –í–Ω–µ–¥—Ä–∏—Ç–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É (lazy loading) –¥–ª—è –Ω–µ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤');
    console.log('  - –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Å–∂–∞—Ç–∏–µ, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, WebP)');
    console.log('  - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ –∫–æ–¥–∞ —Å –ø–æ–º–æ—â—å—é –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –±–∞–Ω–¥–ª–∞');
    console.log('  - –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ tree-shaking –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Ä—Ç–≤–æ–≥–æ –∫–æ–¥–∞');
  } else {
    console.log('\n‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log('üîç –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–∞ –±–∞–Ω–¥–ª–∞...\n');

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Å–±–æ—Ä–∫–∞
    if (!fs.existsSync('.next')) {
      console.log('üìù –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã build...');
      execSync('npm run build', { stdio: 'inherit' });
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤
    const jsFiles = getFileSizes('js');
    const cssFiles = getFileSizes('css');
    const imageFiles = getFileSizes('images');

    // –°—É–º–º–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä—ã
    const results = {
      js: {
        files: jsFiles,
        totalSize: jsFiles.reduce((sum, file) => sum + file.size, 0),
        totalGzipSize: jsFiles.reduce((sum, file) => sum + file.gzipSize, 0),
        largestFile: jsFiles.length > 0 ? jsFiles[0] : null,
      },
      css: {
        files: cssFiles,
        totalSize: cssFiles.reduce((sum, file) => sum + file.size, 0),
        totalGzipSize: cssFiles.reduce((sum, file) => sum + file.gzipSize, 0),
        largestFile: cssFiles.length > 0 ? cssFiles[0] : null,
      },
      images: {
        files: imageFiles,
        totalSize: imageFiles.reduce((sum, file) => sum + file.size, 0),
        largestFile: imageFiles.length > 0 ? imageFiles[0] : null,
      },
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–æ–≤
    const issues = checkThresholds(results);

    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –∏—Å—Ç–æ—Ä–∏–µ–π
    const comparison = compareWithHistory(results, baseFile);

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
    if (saveHistory) {
      updateHistory(results, baseFile);
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    generateReport(results, issues, comparison);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const hasIssues = issues.length > 0 || comparison.hasRegressedFiles;
    process.exit(hasIssues ? 1 : 0);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ä–∞–∑–º–µ—Ä–∞ –±–∞–Ω–¥–ª–∞:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
main();
