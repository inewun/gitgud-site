#!/usr/bin/env node

/**
 * –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –≤ –ø—Ä–æ–µ–∫—Ç–µ
 * –û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤ –≤ –æ–¥–∏–Ω
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');
const minimist = require('minimist');
const { glob } = require('glob');

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const args = minimist(process.argv.slice(2));
const shouldFix = args.fix !== false; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
const verbose = args.verbose || false; // –ü–æ–¥—Ä–æ–±–Ω—ã–π —Ä–µ–∂–∏–º –≤—ã–≤–æ–¥–∞
const maxPasses = args.passes || 3; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ö–æ–¥–æ–≤ –¥–ª—è ESLint

// –ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞
const ROOT_DIR = path.resolve(__dirname, '..');
const SRC_DIR = path.resolve(ROOT_DIR, 'src');

// –ò—Å–∫–ª—é—á–∞–µ–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
const EXCLUDED_DIRS = ['node_modules', '.git', '.next', 'dist', 'build'];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –∏ –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
function runCommand(command, description) {
  console.log(`\nüöÄ ${description}...`);

  if (verbose) {
    console.log(`–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: ${command}`);
  }

  try {
    const output = execSync(command, { encoding: 'utf8', stdio: verbose ? 'inherit' : 'pipe' });
    console.log(`‚úÖ ${description} - –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ`);
    return { success: true, output };
  } catch (error) {
    console.error(`‚ö†Ô∏è –í–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏: ${description}`);
    if (verbose) {
      console.error(error.stdout || error.message);
    }
    return { success: false, output: error.stdout || error.message };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø–æ —à–∞–±–ª–æ–Ω—É
async function findFiles(pattern) {
  try {
    return await glob(pattern, {
      ignore: EXCLUDED_DIRS.map(dir => `**/${dir}/**`),
    });
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ñ–∞–π–ª–æ–≤ –ø–æ —à–∞–±–ª–æ–Ω—É ${pattern}:`, error);
    return [];
  }
}

// –†–ê–ó–î–ï–õ 1: –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ù–ê–°–¢–†–û–ï–ö –ê–õ–ò–ê–°–û–í

// –°–ø–∏—Å–æ–∫ –∞–ª–∏–∞—Å–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
const EXPECTED_ALIASES = [
  { name: '@/*', path: './src/*' },
  { name: '@/app/*', path: './src/app/*' },
  { name: '@/widgets/*', path: './src/widgets/*' },
  { name: '@/features/*', path: './src/features/*' },
  { name: '@/entities/*', path: './src/entities/*' },
  { name: '@/shared/*', path: './src/shared/*' },
  { name: '@/domain/*', path: './src/domain/*' },
  { name: '@/styles/*', path: './src/styles/*' },
  { name: '@/lib/*', path: './src/lib/*' },
  { name: '@/pages/*', path: './src/pages/*' },
  { name: '@/public/*', path: './public/*' },
];

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ tsconfig.json
function syncAliases() {
  console.log('\nüîç –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–ª–∏–∞—Å–æ–≤...');
  let hasChanges = false;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ tsconfig.json
  try {
    const tsConfigPath = path.join(ROOT_DIR, 'tsconfig.json');
    const tsConfigContent = fs.readFileSync(tsConfigPath, 'utf8');
    const tsConfig = JSON.parse(tsConfigContent);

    // –ï—Å–ª–∏ –Ω–µ—Ç —Å–µ–∫—Ü–∏–∏ paths, —Å–æ–∑–¥–∞–µ–º –µ—ë
    if (!tsConfig.compilerOptions) {
      tsConfig.compilerOptions = {};
    }

    if (!tsConfig.compilerOptions.paths) {
      tsConfig.compilerOptions.paths = {};
    }

    const paths = tsConfig.compilerOptions.paths;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –æ–∂–∏–¥–∞–µ–º—ã–π –∞–ª–∏–∞—Å
    for (const alias of EXPECTED_ALIASES) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∞–ª–∏–∞—Å–∞
      const hasCorrectAlias =
        paths[alias.name] &&
        Array.isArray(paths[alias.name]) &&
        paths[alias.name].includes(alias.path);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ—á–Ω–æ–≥–æ –∞–ª–∏–∞—Å–∞ (–±–µ–∑ —Å–ª–µ—à–∞ –ø–æ—Å–ª–µ @)
      const wrongAlias = alias.name.replace('@/', '@');
      const hasWrongAlias = paths[wrongAlias] !== undefined;

      if (!hasCorrectAlias || hasWrongAlias) {
        if (verbose) {
          console.log(`‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –∞–ª–∏–∞—Å–æ–º ${alias.name} –≤ tsconfig.json`);
        }

        if (shouldFix) {
          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–ª–∏–∞—Å
          paths[alias.name] = [alias.path];

          // –£–¥–∞–ª—è–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–ª–∏–∞—Å, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
          if (hasWrongAlias) {
            delete paths[wrongAlias];
          }

          hasChanges = true;
        }
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ baseUrl
    if (!tsConfig.compilerOptions.baseUrl || tsConfig.compilerOptions.baseUrl !== '.') {
      if (verbose) {
        console.log('‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ baseUrl –≤ tsconfig.json');
      }

      if (shouldFix) {
        tsConfig.compilerOptions.baseUrl = '.';
        hasChanges = true;
      }
    }

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –∏ –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    if (hasChanges && shouldFix) {
      fs.writeFileSync(tsConfigPath, JSON.stringify(tsConfig, null, 2), 'utf8');
      console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–ª–∏–∞—Å–æ–≤ –≤ tsconfig.json —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
    } else if (!hasChanges) {
      console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–ª–∏–∞—Å–æ–≤ –≤ tsconfig.json –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã');
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ tsconfig.json: ${error.message}`);
  }

  return hasChanges;
}

// –†–ê–ó–î–ï–õ 2: –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ò–ú–ü–û–†–¢–û–í

// –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ –±–µ–∑ —Å–ª–µ—à–∞ –ø–æ—Å–ª–µ @
const IMPORT_REGEX = /from\s+['"]@([^/'"][^'"]*)['"]/g;
// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤ –∏ require
const DYNAMIC_IMPORT_REGEX = /(?:import|require)\s*\(\s*['"]@([^/'"][^'"]*)['"]\s*\)/g;

// –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≥–ª—É–±–æ–∫–∏—Ö –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤ (3 —É—Ä–æ–≤–Ω—è –∏ –≥–ª—É–±–∂–µ)
const DEEP_RELATIVE_IMPORT_REGEX = /from\s+['"](?:\.\.\/){3,}([^'"]+)['"]/g;
const DEEP_RELATIVE_DYNAMIC_IMPORT_REGEX =
  /(?:import|require)\s*\(\s*['"](?:\.\.\/){3,}([^'"]+)['"]\s*\)/g;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–±—Å–æ–ª—é—Ç–Ω–æ–≥–æ –ø—É—Ç–∏ –∏–º–ø–æ—Ä—Ç–∞
function determineAbsolutePath(relativeImportPath, sourceFilePath) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    const sourceDir = path.dirname(sourceFilePath);

    // –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞
    let absoluteImportPath = path.resolve(sourceDir, relativeImportPath);

    // –ï—Å–ª–∏ –ø—É—Ç—å —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é src, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –ø—É—Ç—å —Å @/
    if (absoluteImportPath.startsWith(SRC_DIR)) {
      const relativePath = path.relative(SRC_DIR, absoluteImportPath);
      return relativePath.replace(/\\/g, '/'); // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–ª–µ—à–∏ –¥–ª—è Windows
    }

    return null; // –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ –ø—É—Ç—å —Å @/
  } catch (error) {
    if (verbose) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –∞–±—Å–æ–ª—é—Ç–Ω–æ–≥–æ –ø—É—Ç–∏: ${error.message}`);
    }
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–º–ø–æ—Ä—Ç–æ–≤
async function fixImports() {
  console.log('\nüîç –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤...');

  // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ñ–∞–π–ª—ã TypeScript –∏ JavaScript
  const files = await findFiles('**/*.{ts,tsx,js,jsx,mjs,cjs}');

  let results = {
    scanned: 0,
    needsFix: 0,
    fixed: 0,
    errors: 0,
    withoutPrefix: 0,
    deepRelative: 0,
  };

  for (const file of files) {
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª—ã –≤ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö
    if (EXCLUDED_DIRS.some(dir => file.includes(`/${dir}/`))) {
      continue;
    }

    results.scanned++;
    try {
      const fileContent = fs.readFileSync(file, 'utf8');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ –±–µ–∑ —Å–ª–µ—à–∞ –ø–æ—Å–ª–µ @
      const hasImportsWithoutPrefix =
        IMPORT_REGEX.test(fileContent) || DYNAMIC_IMPORT_REGEX.test(fileContent);

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º lastIndex –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
      IMPORT_REGEX.lastIndex = 0;
      DYNAMIC_IMPORT_REGEX.lastIndex = 0;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≥–ª—É–±–æ–∫–∏—Ö –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
      const hasDeepRelativeImports =
        DEEP_RELATIVE_IMPORT_REGEX.test(fileContent) ||
        DEEP_RELATIVE_DYNAMIC_IMPORT_REGEX.test(fileContent);

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º lastIndex
      DEEP_RELATIVE_IMPORT_REGEX.lastIndex = 0;
      DEEP_RELATIVE_DYNAMIC_IMPORT_REGEX.lastIndex = 0;

      // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–º–ø–æ—Ä—Ç—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
      if (hasImportsWithoutPrefix || hasDeepRelativeImports) {
        results.needsFix++;

        if (hasImportsWithoutPrefix) {
          results.withoutPrefix++;
        }

        if (hasDeepRelativeImports) {
          results.deepRelative++;
        }

        if (shouldFix) {
          let newContent = fileContent;

          // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ @/
          if (hasImportsWithoutPrefix) {
            newContent = newContent
              .replace(IMPORT_REGEX, "from '@/$1'")
              .replace(DYNAMIC_IMPORT_REGEX, "import('@/$1')");
          }

          // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≥–ª—É–±–æ–∫–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
          if (hasDeepRelativeImports) {
            // –î–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
            newContent = newContent.replace(DEEP_RELATIVE_IMPORT_REGEX, (match, importPath) => {
              const absolutePath = determineAbsolutePath(match.split("'")[1], file);
              if (absolutePath) {
                return `from '@/${absolutePath}'`;
              }
              return match; // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
            });

            // –î–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
            newContent = newContent.replace(
              DEEP_RELATIVE_DYNAMIC_IMPORT_REGEX,
              (match, importPath) => {
                const importPathWithDots = match.split("'")[1];
                const absolutePath = determineAbsolutePath(importPathWithDots, file);
                if (absolutePath) {
                  return `import('@/${absolutePath}')`;
                }
                return match; // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
              },
            );
          }

          // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
          if (newContent !== fileContent) {
            fs.writeFileSync(file, newContent, 'utf8');
            if (verbose) {
              console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª: ${path.relative(ROOT_DIR, file)}`);
            }
            results.fixed++;
          }
        } else if (verbose) {
          console.log(`‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ${path.relative(ROOT_DIR, file)}`);
        }
      }
    } catch (error) {
      if (verbose) {
        console.error(
          `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ ${path.relative(ROOT_DIR, file)}:`,
          error.message,
        );
      }
      results.errors++;
    }
  }

  console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–º–ø–æ—Ä—Ç–æ–≤:');
  console.log(`- –ü—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${results.scanned}`);
  console.log(`- –¢—Ä–µ–±–æ–≤–∞–ª–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ${results.needsFix}`);
  console.log(`  ‚Ä¢ –ò–º–ø–æ—Ä—Ç—ã –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ @/: ${results.withoutPrefix}`);
  console.log(`  ‚Ä¢ –ì–ª—É–±–æ–∫–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã: ${results.deepRelative}`);

  if (shouldFix) {
    console.log(`- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${results.fixed}`);
  }

  if (results.errors > 0) {
    console.log(`- –û—à–∏–±–∫–∏ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: ${results.errors}`);
  }

  return results;
}

// –†–ê–ó–î–ï–õ 3: –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –û–®–ò–ë–û–ö TYPESCRIPT

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫ —Å any —Ç–∏–ø–∞–º–∏
async function fixTypeScriptErrors() {
  console.log('\nüõ†Ô∏è –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫ TypeScript...');
  let fixedCount = 0;

  // –®–∞–≥ 1: –ò—Å–ø—Ä–∞–≤–ª—è–µ–º any —Ç–∏–ø—ã
  if (shouldFix) {
    console.log('‚Ä¢ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ any...');

    // –ù–∞—Ö–æ–¥–∏–º —Ñ–∞–π–ª—ã TypeScript
    const files = await findFiles('**/*.{ts,tsx}');

    for (const file of files) {
      try {
        const content = fs.readFileSync(file, 'utf8');

        // –ó–∞–º–µ–Ω—è–µ–º any –Ω–∞ –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ç–∏–ø—ã –≥–¥–µ –≤–æ–∑–º–æ–∂–Ω–æ
        let newContent = content;

        // –ó–∞–º–µ–Ω–∞ any[] –Ω–∞ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ç–∏–ø—ã –º–∞—Å—Å–∏–≤–æ–≤
        newContent = newContent.replace(/any\[\]/g, match => {
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
          const surroundingText = content.substring(
            Math.max(0, content.indexOf(match) - 100),
            Math.min(content.length, content.indexOf(match) + 100),
          );

          if (surroundingText.includes('string')) return 'string[]';
          if (surroundingText.includes('number')) return 'number[]';
          if (surroundingText.includes('boolean')) return 'boolean[]';
          if (surroundingText.includes('object')) return 'Record<string, unknown>[]';

          return 'unknown[]'; // –ë–µ–∑–æ–ø–∞—Å–Ω–µ–µ —á–µ–º any[]
        });

        // –ó–∞–º–µ–Ω–∞ –ø—Ä–æ—Å—Ç—ã—Ö any –Ω–∞ unknown (–±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞)
        newContent = newContent.replace(/: any(?![[\]{}a-zA-Z0-9])/g, ': unknown');

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è, –µ—Å–ª–∏ –±—ã–ª–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
        if (newContent !== content) {
          fs.writeFileSync(file, newContent, 'utf8');
          fixedCount++;
          if (verbose) {
            console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª: ${file}`);
          }
        }
      } catch (error) {
        if (verbose) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ ${file}:`, error.message);
        }
      }
    }

    console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${fixedCount} —Ñ–∞–π–ª–æ–≤ —Å any —Ç–∏–ø–∞–º–∏`);
  }

  // –®–∞–≥ 2: –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
  if (shouldFix) {
    console.log('‚Ä¢ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫...');

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–ø–ø–∏–Ω–≥ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö/–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π –∏–º–ø–æ—Ä—Ç–∞ –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
    const importPatterns = [
      { from: /@\/storybook\/react/g, to: '@storybook/react' },
      { from: /@\/testing-library\/react/g, to: '@testing-library/react' },
      { from: /@\/heroicons\/react\/24\/(outline|solid)/g, to: '@heroicons/react/24/$1' },
      { from: /@\/tailwindcss\/forms/g, to: '@tailwindcss/forms' },
      { from: /@\/trpc\/server/g, to: '@trpc/server' },
      { from: /@\/jest\/globals/g, to: '@jest/globals' },
      { from: /@\/sentry\/nextjs/g, to: '@sentry/nextjs' },
      { from: /@\/hookform\/resolvers\/zod/g, to: '@hookform/resolvers/zod' },
      { from: /@\/reduxjs\/toolkit/g, to: '@reduxjs/toolkit' },
    ];

    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º TS —Ñ–∞–π–ª–∞–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
    const files = await findFiles('**/*.{ts,tsx}');
    let importFixCount = 0;

    for (const file of files) {
      try {
        const content = fs.readFileSync(file, 'utf8');
        let newContent = content;
        let wasModified = false;

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∑–∞–º–µ–Ω—ã
        for (const pattern of importPatterns) {
          const originalContent = newContent;
          newContent = newContent.replace(pattern.from, pattern.to);

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –∑–∞–º–µ–Ω–∞
          if (originalContent !== newContent) {
            wasModified = true;
          }
        }

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è, –µ—Å–ª–∏ –±—ã–ª–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
        if (wasModified) {
          fs.writeFileSync(file, newContent, 'utf8');
          importFixCount++;
          if (verbose) {
            console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –∏–º–ø–æ—Ä—Ç—ã –≤ —Ñ–∞–π–ª–µ: ${file}`);
          }
        }
      } catch (error) {
        if (verbose) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ ${file}:`, error.message);
        }
      }
    }

    console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${importFixCount} —Ñ–∞–π–ª–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏ –∏–º–ø–æ—Ä—Ç–æ–≤ –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫`);
  }

  // –®–∞–≥ 3: –î–æ–±–∞–≤–ª—è–µ–º —è–≤–Ω—ã–µ —Ç–∏–ø—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é ESLint
  if (shouldFix) {
    console.log('‚Ä¢ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö...');

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º ESLint –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    runCommand(
      'npx eslint . --ext .ts,.tsx --fix --max-warnings=9999 --rule "@typescript-eslint/explicit-function-return-type:warn" --rule "@typescript-eslint/no-unused-vars:error"',
      'ESLint –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤ TypeScript',
    );
  }

  return true;
}

// –†–ê–ó–î–ï–õ 4: –†–ê–°–®–ò–†–ï–ù–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï ESLINT

// –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å —É—Å–∏–ª–µ–Ω–Ω—ã–º —Ä–µ–∂–∏–º–æ–º –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
function createTemporaryEslintConfig() {
  try {
    // –ü—Ä–∞–≤–∏–ª–∞, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º --fix
    const FIXABLE_RULES = [
      'import/order',
      'import/first',
      'import/newline-after-import',
      'unused-imports/no-unused-imports',
      'prettier/prettier',
      '@typescript-eslint/no-unused-vars',
      '@next/next/no-img-element',
    ];

    const eslintConfigPath = path.resolve(ROOT_DIR, '.eslintrc.js');
    const originalConfig = require(eslintConfigPath);

    // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏
    const enhancedConfig = JSON.parse(JSON.stringify(originalConfig));

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å 'warn' –¥–ª—è –≤—Å–µ—Ö –ø—Ä–∞–≤–∏–ª, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    FIXABLE_RULES.forEach(rule => {
      if (enhancedConfig.rules && enhancedConfig.rules[rule]) {
        if (Array.isArray(enhancedConfig.rules[rule])) {
          enhancedConfig.rules[rule][0] = 'warn';
        } else {
          enhancedConfig.rules[rule] = 'warn';
        }
      }
    });

    const tempConfigPath = path.resolve(ROOT_DIR, '.eslintrc.temp.js');
    fs.writeFileSync(tempConfigPath, `module.exports = ${JSON.stringify(enhancedConfig, null, 2)}`);

    return tempConfigPath;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ESLint:', error);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ ESLint
function runAdvancedEslintFix() {
  console.log('\nüîß –ó–∞–ø—É—Å–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫ ESLint...');

  if (!shouldFix) {
    console.log('‚ö†Ô∏è –†–µ–∂–∏–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∏, ESLint –Ω–µ –±—É–¥–µ—Ç –≤–Ω–æ—Å–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è.');
    return;
  }

  // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é ESLint
  const tempConfigPath = createTemporaryEslintConfig();
  if (!tempConfigPath) {
    console.error(
      '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é ESLint. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –æ–±—ã—á–Ω—ã–º —Ä–µ–∂–∏–º–æ–º.',
    );
    runCommand(
      'npx eslint . --ext .ts,.tsx --fix --max-warnings=9999',
      '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ ESLint',
    );
    return;
  }

  console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ESLint –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è');

  let pass = 1;
  let previousErrorCount = Infinity;
  let currentErrorCount = Infinity;

  // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Ö–æ–¥–æ–≤ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫
  while (pass <= maxPasses && currentErrorCount > 0 && currentErrorCount < previousErrorCount) {
    console.log(`‚Ä¢ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ö–æ–¥–∞ ${pass}/${maxPasses}...`);

    const eslintResult = runCommand(
      `npx eslint . --ext .ts,.tsx --fix --max-warnings=9999 --config ${tempConfigPath}`,
      `ESLint –ø—Ä–æ—Ö–æ–¥ ${pass}/${maxPasses}`,
    );

    previousErrorCount = currentErrorCount;

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –æ—à–∏–±–æ–∫
    const output = eslintResult.output || '';
    const errorMatches = output.match(/(\d+) errors?/);
    currentErrorCount = errorMatches ? parseInt(errorMatches[1], 10) : 0;

    console.log(`üìä –ü—Ä–æ—Ö–æ–¥ ${pass}: –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${currentErrorCount} –æ—à–∏–±–æ–∫`);

    // –ï—Å–ª–∏ –æ—à–∏–±–æ–∫ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
    if (currentErrorCount === 0) {
      console.log('‚ú® –í—Å–µ –æ—à–∏–±–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!');
      break;
    }

    // –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ –Ω–µ —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
    if (currentErrorCount >= previousErrorCount && pass > 1) {
      console.log('‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ –Ω–µ —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è');
      break;
    }

    pass++;
  }

  // –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ö–æ–¥ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
  console.log('‚Ä¢ –ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–¥–∞ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π...');
  runCommand(
    'npx eslint . --ext .ts,.tsx --fix --max-warnings=9999',
    '–§–∏–Ω–∞–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ ESLint',
  );

  // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
  try {
    fs.unlinkSync(tempConfigPath);
    console.log('üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ESLint —É–¥–∞–ª–µ–Ω–∞');
  } catch (error) {
    if (verbose) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
    }
  }
}

// –†–ê–ó–î–ï–õ 5: –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –ö–û–î–ê –° PRETTIER

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞ —Å Prettier
function formatCodeWithPrettier() {
  console.log('\nüíÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ —Å Prettier...');

  if (!shouldFix) {
    console.log('‚ö†Ô∏è –†–µ–∂–∏–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∏, Prettier –Ω–µ –±—É–¥–µ—Ç –≤–Ω–æ—Å–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è.');
    return;
  }

  return runCommand(
    'npx prettier --write "**/*.{js,jsx,ts,tsx,json,css,scss,md}"',
    '–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ —Å Prettier',
  );
}

// –†–ê–ó–î–ï–õ 6: –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –°–ö–†–ò–ü–¢–ê

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞
async function main() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫...');
  console.log(`–†–µ–∂–∏–º: ${shouldFix ? '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ' : '–¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞'}`);
  console.log(`–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥: ${verbose ? '–í–∫–ª—é—á–µ–Ω' : '–í—ã–∫–ª—é—á–µ–Ω'}`);

  // –®–∞–≥ 1: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–ª–∏–∞—Å–æ–≤
  await syncAliases();

  // –®–∞–≥ 2: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ —Å Prettier
  formatCodeWithPrettier();

  // –®–∞–≥ 3: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤
  await fixImports();

  // –®–∞–≥ 4: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫ TypeScript
  await fixTypeScriptErrors();

  // –®–∞–≥ 5: –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ —Å –ø–æ–º–æ—â—å—é ESLint
  runAdvancedEslintFix();

  // –®–∞–≥ 6: –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–æ–≤ TypeScript
  runCommand('npx tsc --noEmit', '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ TypeScript');

  console.log('\n‚ú® –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  console.log('üìã –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –º–æ–≥—É—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å —Ä—É—á–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.');
  console.log('   –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –æ—à–∏–±–∫–∏ —Å –ø–æ–º–æ—â—å—é:');
  console.log('   - pnpm lint');
  console.log('   - pnpm type-check');
}

main().catch(error => {
  console.error('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});
