#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Web Vitals –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Vercel Analytics –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Å–±–æ—Ä–æ–≤
 * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è Core Web Vitals –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
 *
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * node scripts/check-web-vitals.js --env=production
 */

const fs = require('fs');
const path = require('path');
const { exec } = require('child_process');
const minimist = require('minimist');

// –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const args = minimist(process.argv.slice(2));
const environment = args.env || 'development';
const verbose = args.verbose || false;

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è Web Vitals –ø–æ —Å—Ä–µ–¥–∞–º
const thresholds = {
  development: {
    LCP: 2500, // ms
    FID: 100, // ms
    CLS: 0.1, // –µ–¥–∏–Ω–∏—Ü–∞
    FCP: 1800, // ms
    TTI: 3800, // ms
    TBT: 200, // ms
  },
  production: {
    LCP: 2000, // ms - —Å—Ç—Ä–æ–∂–µ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
    FID: 70, // ms
    CLS: 0.05, // –µ–¥–∏–Ω–∏—Ü–∞ - —Å—Ç—Ä–æ–∂–µ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
    FCP: 1500, // ms
    TTI: 3500, // ms
    TBT: 150, // ms
  },
  // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
  mobile: {
    LCP: 2700, // ms - –º–æ–±–∏–ª—å–Ω—ã–µ —á—É—Ç—å –º–µ–¥–ª–µ–Ω–Ω–µ–µ
    FID: 120, // ms
    CLS: 0.15, // –µ–¥–∏–Ω–∏—Ü–∞ - –º–æ–±–∏–ª—å–Ω—ã–µ —Å –±–æ–ª—å—à–µ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é —Å–º–µ—â–µ–Ω–∏—è
    FCP: 2000, // ms
    TTI: 4200, // ms
    TBT: 250, // ms
  },
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ Web Vitals
const getWebVitals = async () => {
  // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
  // –∏–∑ Vercel Analytics, Google Analytics –∏–ª–∏ –¥—Ä—É–≥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞

  // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
  // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π API-–∑–∞–ø—Ä–æ—Å
  return new Promise(resolve => {
    setTimeout(() => {
      resolve({
        LCP: {
          desktop: 1950,
          mobile: 2600,
        },
        FID: {
          desktop: 65,
          mobile: 110,
        },
        CLS: {
          desktop: 0.04,
          mobile: 0.12,
        },
        FCP: {
          desktop: 1450,
          mobile: 1850,
        },
        TTI: {
          desktop: 3400,
          mobile: 4100,
        },
        TBT: {
          desktop: 140,
          mobile: 220,
        },
      });
    }, 1000);
  });
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞—á–µ–Ω–∏–π –º–µ—Ç—Ä–∏–∫
const checkMetrics = (metrics, deviceType = 'desktop') => {
  const results = {
    pass: true,
    details: {},
  };

  const thresholdType = deviceType === 'mobile' ? 'mobile' : environment;
  const currentThresholds = thresholds[thresholdType];

  Object.entries(metrics).forEach(([metricName, values]) => {
    const value = values[deviceType];
    const threshold = currentThresholds[metricName];

    if (!threshold) return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –±–µ–∑ –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –ø—Ä–æ—à–ª–∞ –ª–∏ –º–µ—Ç—Ä–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫—É
    const isPassing = ['CLS'].includes(metricName)
      ? value <= threshold // –î–ª—è CLS –ª—É—á—à–µ –º–µ–Ω—å—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
      : value <= threshold; // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ —Ç–æ–∂–µ –ª—É—á—à–µ –º–µ–Ω—å—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

    results.details[metricName] = {
      value,
      threshold,
      pass: isPassing,
      deviceType,
    };

    // –ï—Å–ª–∏ —Ö–æ—Ç—å –æ–¥–Ω–∞ –º–µ—Ç—Ä–∏–∫–∞ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç, –≤–µ—Å—å —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç
    if (!isPassing) {
      results.pass = false;
    }
  });

  return results;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å
const printResults = results => {
  console.log(`\nüèéÔ∏è  –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ Core Web Vitals (${environment}):\n`);

  Object.entries(results).forEach(([deviceType, deviceResults]) => {
    console.log(`üì± ${deviceType.toUpperCase()}:\n`);

    if (deviceResults.pass) {
      console.log('  ‚úÖ –í—Å–µ –º–µ—Ç—Ä–∏–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –ø–æ—Ä–æ–≥–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º!');
    } else {
      console.log('  ‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –ø–æ—Ä–æ–≥–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º.');
    }

    if (verbose || !deviceResults.pass) {
      console.log('\n  –î–µ—Ç–∞–ª–∏ –º–µ—Ç—Ä–∏–∫:');
      Object.entries(deviceResults.details).forEach(([metricName, metricDetails]) => {
        const icon = metricDetails.pass ? '‚úÖ' : '‚ùå';
        console.log(
          `  ${icon} ${metricName}: ${metricDetails.value}ms (–ø–æ—Ä–æ–≥: ${metricDetails.threshold}ms)`,
        );
      });
    }

    console.log(''); // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
  });
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
const generateRecommendations = results => {
  const recommendations = [];

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —É–ª—É—á—à–µ–Ω–∏—è
  const checkMetric = (deviceType, metricName) => {
    const details = results[deviceType]?.details[metricName];
    if (details && !details.pass) {
      switch (metricName) {
        case 'LCP':
          recommendations.push('‚ö° –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:');
          recommendations.push('  - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤');
          recommendations.push('  - –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (WebP, lazy loading)');
          recommendations.push(
            '  - –í–Ω–µ–¥—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ (SSR) –∏–ª–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é (SSG)',
          );
          break;
        case 'FID':
          recommendations.push('üëÜ –£–ª—É—á—à–∏—Ç–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:');
          recommendations.push('  - –ú–∏–Ω–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ JavaScript');
          recommendations.push('  - –†–∞–∑–¥–µ–ª–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–∞ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–µ');
          recommendations.push('  - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Web Workers –¥–ª—è —Ç—è–∂–µ–ª—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π');
          break;
        case 'CLS':
          recommendations.push('üìè –£–º–µ–Ω—å—à–∏—Ç–µ —Å–º–µ—â–µ–Ω–∏–µ –º–∞–∫–µ—Ç–∞:');
          recommendations.push('  - –í—Å–µ–≥–¥–∞ —É–∫–∞–∑—ã–≤–∞–π—Ç–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –≤–∏–¥–µ–æ');
          recommendations.push('  - –ò–∑–±–µ–≥–∞–π—Ç–µ –≤—Å—Ç–∞–≤–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞–¥ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º');
          recommendations.push('  - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ CSS –≤–º–µ—Å—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏');
          break;
        case 'FCP':
          recommendations.push('üöÄ –£—Å–∫–æ—Ä—å—Ç–µ –ø–µ—Ä–≤—É—é –æ—Ç—Ä–∏—Å–æ–≤–∫—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞:');
          recommendations.push('  - –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π CSS –∏ –≤–∫–ª—é—á–∏—Ç–µ –µ–≥–æ –≤ <head>');
          recommendations.push('  - –ú–∏–Ω–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –±–ª–æ–∫–∏—Ä—É—é—â–∏–µ —Ä–µ—Å—É—Ä—Å—ã');
          recommendations.push('  - –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ');
          break;
        case 'TTI':
          recommendations.push('‚è±Ô∏è –£–ª—É—á—à–∏—Ç–µ –≤—Ä–µ–º—è –¥–æ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:');
          recommendations.push('  - –°–æ–∫—Ä–∞—Ç–∏—Ç–µ —Ä–∞–∑–º–µ—Ä JavaScript');
          recommendations.push('  - –û—Ç–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É –Ω–µ–∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤');
          recommendations.push('  - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ code-splitting –∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç');
          break;
        case 'TBT':
          recommendations.push('üõë –£–º–µ–Ω—å—à–∏—Ç–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞:');
          recommendations.push('  - –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ JavaScript-–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ');
          recommendations.push('  - –ü–µ—Ä–µ–Ω–µ—Å–∏—Ç–µ —Ç—è–∂–µ–ª—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≤ Web Workers');
          recommendations.push('  - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∏—Ä—Ç—É–∞–ª–∏–∑–∞—Ü–∏—é –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤');
          break;
      }
    }
  };

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
  ['desktop', 'mobile'].forEach(deviceType => {
    ['LCP', 'FID', 'CLS', 'FCP', 'TTI', 'TBT'].forEach(metric => {
      checkMetric(deviceType, metric);
    });
  });

  return recommendations;
};

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Web Vitals –¥–ª—è –æ–∫—Ä—É–∂–µ–Ω–∏—è: ${environment}`);

  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ Web Vitals
    const metrics = await getWebVitals();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞ –∏ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    const desktopResults = checkMetrics(metrics, 'desktop');
    const mobileResults = checkMetrics(metrics, 'mobile');

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const allResults = {
      desktop: desktopResults,
      mobile: mobileResults,
    };

    // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    printResults(allResults);

    // –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if (!desktopResults.pass || !mobileResults.pass) {
      const recommendations = generateRecommendations(allResults);
      if (recommendations.length > 0) {
        console.log('\nüîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é:\n');
        recommendations.forEach(rec => console.log(rec));
      }
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤—ã—Ö–æ–¥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    process.exit(desktopResults.pass && mobileResults.pass ? 0 : 1);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Web Vitals:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
main();
