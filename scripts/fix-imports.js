#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–º–ø–æ—Ä—Ç–æ–≤
 * 1) –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∏–º–ø–æ—Ä—Ç—ã –±–µ–∑ —Å–ª–µ—à–∞: @styles/compositions -> @/styles/compositions
 * 2) –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª—É–±–æ–∫–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –Ω–∞ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ —Å @/
 */

const fs = require('fs');
const path = require('path');
const minimist = require('minimist');

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const args = minimist(process.argv.slice(2));
const shouldFix = args.fix || false;

// –ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞
const ROOT_DIR = path.resolve(__dirname, '..');
const SRC_DIR = path.resolve(ROOT_DIR, 'src');

// –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ –±–µ–∑ —Å–ª–µ—à–∞ –ø–æ—Å–ª–µ @
// –ò—â–µ—Ç –∏–º–ø–æ—Ä—Ç—ã –≤–∏–¥–∞: from '@/module/path' –∏–ª–∏ import { x } from '@/module/path'
const IMPORT_REGEX = /from\s+['"]@([^/'"][^'"]*)['"]/g;
// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤ –∏ require
const DYNAMIC_IMPORT_REGEX = /(?:import|require)\s*\(\s*['"]@([^/'"][^'"]*)['"]\s*\)/g;

// –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≥–ª—É–±–æ–∫–∏—Ö –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤ (3 —É—Ä–æ–≤–Ω—è –∏ –≥–ª—É–±–∂–µ)
const DEEP_RELATIVE_IMPORT_REGEX = /from\s+['"](?:\.\.\/){3,}([^'"]+)['"]/g;
const DEEP_RELATIVE_DYNAMIC_IMPORT_REGEX =
  /(?:import|require)\s*\(\s*['"](?:\.\.\/){3,}([^'"]+)['"]\s*\)/g;

// –ò—Å–∫–ª—é—á–∞–µ–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
const EXCLUDED_DIRS = ['node_modules', '.git', '.next', 'dist', 'build'];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–±—Å–æ–ª—é—Ç–Ω–æ–≥–æ –ø—É—Ç–∏ –∏–º–ø–æ—Ä—Ç–∞
function determineAbsolutePath(relativeImportPath, sourceFilePath) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    const sourceDir = path.dirname(sourceFilePath);

    // –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞
    let absoluteImportPath = path.resolve(sourceDir, relativeImportPath);

    // –ï—Å–ª–∏ –ø—É—Ç—å —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é src, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –ø—É—Ç—å —Å @/
    if (absoluteImportPath.startsWith(SRC_DIR)) {
      const relativePath = path.relative(SRC_DIR, absoluteImportPath);
      return relativePath.replace(/\\/g, '/'); // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–ª–µ—à–∏ –¥–ª—è Windows
    }

    return null; // –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ –ø—É—Ç—å —Å @/
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –∞–±—Å–æ–ª—é—Ç–Ω–æ–≥–æ –ø—É—Ç–∏: ${error.message}`);
    return null;
  }
}

// –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ö–æ–¥–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
function traverseDirectory(dirPath) {
  const entries = fs.readdirSync(dirPath, { withFileTypes: true });
  let results = {
    scanned: 0,
    needsFix: 0,
    fixed: 0,
    errors: 0,
    withoutPrefix: 0,
    deepRelative: 0,
  };

  for (const entry of entries) {
    const fullPath = path.join(dirPath, entry.name);

    if (entry.isDirectory()) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
      if (!EXCLUDED_DIRS.includes(entry.name)) {
        const subResults = traverseDirectory(fullPath);
        results.scanned += subResults.scanned;
        results.needsFix += subResults.needsFix;
        results.fixed += subResults.fixed;
        results.errors += subResults.errors;
        results.withoutPrefix += subResults.withoutPrefix;
        results.deepRelative += subResults.deepRelative;
      }
    } else if (entry.isFile() && /\.(tsx?|jsx?|mjs|cjs)$/.test(entry.name)) {
      results.scanned++;
      try {
        const fileContent = fs.readFileSync(fullPath, 'utf8');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ –±–µ–∑ —Å–ª–µ—à–∞ –ø–æ—Å–ª–µ @
        const hasImportsWithoutPrefix =
          IMPORT_REGEX.test(fileContent) || DYNAMIC_IMPORT_REGEX.test(fileContent);

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º lastIndex –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
        IMPORT_REGEX.lastIndex = 0;
        DYNAMIC_IMPORT_REGEX.lastIndex = 0;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≥–ª—É–±–æ–∫–∏—Ö –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
        const hasDeepRelativeImports =
          DEEP_RELATIVE_IMPORT_REGEX.test(fileContent) ||
          DEEP_RELATIVE_DYNAMIC_IMPORT_REGEX.test(fileContent);

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º lastIndex
        DEEP_RELATIVE_IMPORT_REGEX.lastIndex = 0;
        DEEP_RELATIVE_DYNAMIC_IMPORT_REGEX.lastIndex = 0;

        // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–º–ø–æ—Ä—Ç—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        if (hasImportsWithoutPrefix || hasDeepRelativeImports) {
          results.needsFix++;

          if (hasImportsWithoutPrefix) {
            results.withoutPrefix++;
          }

          if (hasDeepRelativeImports) {
            results.deepRelative++;
          }

          if (shouldFix) {
            let newContent = fileContent;

            // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ @/
            if (hasImportsWithoutPrefix) {
              newContent = newContent
                .replace(IMPORT_REGEX, "from '@/$1'")
                .replace(DYNAMIC_IMPORT_REGEX, "import('@/$1')");
            }

            // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≥–ª—É–±–æ–∫–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
            if (hasDeepRelativeImports) {
              // –î–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
              newContent = newContent.replace(DEEP_RELATIVE_IMPORT_REGEX, (match, importPath) => {
                const absolutePath = determineAbsolutePath(match.split("'")[1], fullPath);
                if (absolutePath) {
                  return `from '@/${absolutePath}'`;
                }
                return match; // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
              });

              // –î–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
              newContent = newContent.replace(
                DEEP_RELATIVE_DYNAMIC_IMPORT_REGEX,
                (match, importPath) => {
                  const importPathWithDots = match.split("'")[1];
                  const absolutePath = determineAbsolutePath(importPathWithDots, fullPath);
                  if (absolutePath) {
                    return `import('@/${absolutePath}')`;
                  }
                  return match; // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                },
              );
            }

            // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
            if (newContent !== fileContent) {
              fs.writeFileSync(fullPath, newContent, 'utf8');
              console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª: ${path.relative(ROOT_DIR, fullPath)}`);
              results.fixed++;
            }
          } else {
            console.log(`‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ${path.relative(ROOT_DIR, fullPath)}`);
          }
        }
      } catch (error) {
        console.error(
          `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ ${path.relative(ROOT_DIR, fullPath)}:`,
          error.message,
        );
        results.errors++;
      }
    }
  }

  return results;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  console.log(`üîç ${shouldFix ? '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ' : '–ü—Ä–æ–≤–µ—Ä–∫–∞'} –∏–º–ø–æ—Ä—Ç–æ–≤...`);

  const results = traverseDirectory(ROOT_DIR);

  console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
  console.log(`- –ü—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${results.scanned}`);
  console.log(`- –¢—Ä–µ–±—É—é—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ${results.needsFix}`);
  console.log(`  ‚Ä¢ –ò–º–ø–æ—Ä—Ç—ã –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ @/: ${results.withoutPrefix}`);
  console.log(`  ‚Ä¢ –ì–ª—É–±–æ–∫–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã: ${results.deepRelative}`);

  if (shouldFix) {
    console.log(`- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${results.fixed}`);
  } else if (results.needsFix > 0) {
    console.log('\nüí° –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å —Ñ–ª–∞–≥–æ–º --fix:');
    console.log('   pnpm fix-imports --fix');
  }

  if (results.errors > 0) {
    console.log(`- –û—à–∏–±–∫–∏ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: ${results.errors}`);
  }

  if (shouldFix && results.fixed > 0) {
    console.log('\n‚ú® –ò–º–ø–æ—Ä—Ç—ã —É—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!');
  } else if (results.needsFix === 0) {
    console.log('\n‚úÖ –í—Å–µ –∏–º–ø–æ—Ä—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è.');
  }
}

main();
