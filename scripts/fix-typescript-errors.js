#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ñ–∏–∫—Å–∞—Ü–∏–∏ —Ç–∏–ø–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫ TypeScript
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');
const { glob } = require('glob');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
function runCommand(command) {
  try {
    return execSync(command, { encoding: 'utf8' });
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: ${command}`);
    console.error(error.message);
    return error.stdout || '';
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø–æ —à–∞–±–ª–æ–Ω—É
async function findFiles(pattern) {
  try {
    return await glob(pattern, {
      ignore: ['**/node_modules/**', '**/dist/**', '**/build/**', '**/.next/**'],
    });
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ñ–∞–π–ª–æ–≤ –ø–æ —à–∞–±–ª–æ–Ω—É ${pattern}:`, error);
    return [];
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—à–∏–±–æ–∫ —Ç–∏–ø–æ–≤ –≤ —Ñ–∞–π–ª–∞—Ö
async function findTypeErrors() {
  console.log('üîç –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–æ–≤ TypeScript...');

  const output = runCommand('npx tsc --noEmit');
  const errorRegex = /([^(]+\.[t|j]sx?)\((\d+),(\d+)\):\s+error\s+TS\d+:\s+(.+)/g;
  const errors = [];

  let match;
  while ((match = errorRegex.exec(output)) !== null) {
    errors.push({
      file: match[1],
      line: parseInt(match[2], 10),
      column: parseInt(match[3], 10),
      message: match[4],
    });
  }

  console.log(`–ù–∞–π–¥–µ–Ω–æ ${errors.length} –æ—à–∏–±–æ–∫ —Ç–∏–ø–∏–∑–∞—Ü–∏–∏`);
  return errors;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫ —Å any —Ç–∏–ø–∞–º–∏
async function fixAnyTypeErrors() {
  console.log('\nüõ†Ô∏è –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ any...');

  // –ù–∞—Ö–æ–¥–∏–º —Ñ–∞–π–ª—ã TypeScript
  const files = await findFiles('**/*.{ts,tsx}');
  let fixedCount = 0;

  for (const file of files) {
    try {
      const content = fs.readFileSync(file, 'utf8');

      // –ó–∞–º–µ–Ω—è–µ–º any –Ω–∞ –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ç–∏–ø—ã –≥–¥–µ –≤–æ–∑–º–æ–∂–Ω–æ
      let newContent = content;

      // –ó–∞–º–µ–Ω–∞ any[] –Ω–∞ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ç–∏–ø—ã –º–∞—Å—Å–∏–≤–æ–≤
      newContent = newContent.replace(/any\[\]/g, match => {
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ª—É—á—à–∏–π —Ç–∏–ø
        const surroundingText = content.substring(
          Math.max(0, content.indexOf(match) - 100),
          Math.min(content.length, content.indexOf(match) + 100),
        );

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–æ—á–µ–Ω—å —É–ø—Ä–æ—â–µ–Ω–Ω–æ)
        if (surroundingText.includes('string')) return 'string[]';
        if (surroundingText.includes('number')) return 'number[]';
        if (surroundingText.includes('boolean')) return 'boolean[]';
        if (surroundingText.includes('object')) return 'Record<string, unknown>[]';

        return 'unknown[]'; // –ë–µ–∑–æ–ø–∞—Å–Ω–µ–µ —á–µ–º any[]
      });

      // –ó–∞–º–µ–Ω–∞ –ø—Ä–æ—Å—Ç—ã—Ö any –Ω–∞ unknown (–±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞)
      newContent = newContent.replace(/: any(?![[\]{}a-zA-Z0-9])/g, ': unknown');

      // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è, –µ—Å–ª–∏ –±—ã–ª–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
      if (newContent !== content) {
        fs.writeFileSync(file, newContent, 'utf8');
        fixedCount++;
        console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª: ${file}`);
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ ${file}:`, error.message);
    }
  }

  console.log(`–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${fixedCount} —Ñ–∞–π–ª–æ–≤ —Å any —Ç–∏–ø–∞–º–∏`);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –∏–º–ø–æ—Ä—Ç–æ–≤ @/ –≤ storybook –∏ testing-library
async function fixImportPathErrors() {
  console.log('\nüõ†Ô∏è –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –∏–º–ø–æ—Ä—Ç–æ–≤...');

  // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ñ–∞–π–ª—ã —Å –æ—à–∏–±–∫–∞–º–∏ –∏–º–ø–æ—Ä—Ç–æ–≤
  const files = await findFiles('**/*.{ts,tsx}');
  let fixedCount = 0;

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–ø–ø–∏–Ω–≥ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö/–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π –∏–º–ø–æ—Ä—Ç–∞
  const importPatterns = [
    { from: /@\/storybook\/react/g, to: '@storybook/react' },
    { from: /@\/storybook\/nextjs/g, to: '@storybook/nextjs' },
    { from: /@\/testing-library\/react/g, to: '@testing-library/react' },
    { from: /@\/testing-library\/user-event/g, to: '@testing-library/user-event' },
    { from: /@\/playwright\/test/g, to: '@playwright/test' },
    { from: /@\/axe-core\/playwright/g, to: '@axe-core/playwright' },
    { from: /@\/heroicons\/react\/24\/(outline|solid)/g, to: '@heroicons/react/24/$1' },
    { from: /@\/tailwindcss\/forms/g, to: '@tailwindcss/forms' },
    { from: /@\/formatjs\/intl/g, to: '@formatjs/intl' },
    { from: /@\/trpc\/server/g, to: '@trpc/server' },
    { from: /@\/trpc\/server\/adapters\/next/g, to: '@trpc/server/adapters/next' },
    { from: /@\/jest\/globals/g, to: '@jest/globals' },
    { from: /@\/sentry\/nextjs/g, to: '@sentry/nextjs' },
    { from: /@\/hookform\/resolvers\/zod/g, to: '@hookform/resolvers/zod' },
    { from: /@\/reduxjs\/toolkit/g, to: '@reduxjs/toolkit' },
  ];

  for (const file of files) {
    try {
      // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
      const content = fs.readFileSync(file, 'utf8');
      let newContent = content;
      let wasModified = false;

      // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∑–∞–º–µ–Ω—ã
      for (const pattern of importPatterns) {
        const originalContent = newContent;
        newContent = newContent.replace(pattern.from, pattern.to);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –∑–∞–º–µ–Ω–∞
        if (originalContent !== newContent) {
          wasModified = true;
        }
      }

      // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è, –µ—Å–ª–∏ –±—ã–ª–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
      if (wasModified) {
        fs.writeFileSync(file, newContent, 'utf8');
        fixedCount++;
        console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –∏–º–ø–æ—Ä—Ç—ã –≤ —Ñ–∞–π–ª–µ: ${file}`);
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ ${file}:`, error.message);
    }
  }

  console.log(`–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${fixedCount} —Ñ–∞–π–ª–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏ –∏–º–ø–æ—Ä—Ç–æ–≤`);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —è–≤–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Ñ—É–Ω–∫—Ü–∏–π
async function addExplicitReturnTypes() {
  console.log('\nüõ†Ô∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —è–≤–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π...');

  // –ó–∞–ø—É—Å–∫–∞–µ–º ESLint —Å –ø—Ä–∞–≤–∏–ª–æ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
  runCommand(
    'npx eslint . --ext .ts,.tsx --fix --max-warnings=9999 --rule "@typescript-eslint/explicit-function-return-type:warn"',
  );

  console.log('‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —è–≤–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏
async function fixUnusedVariables() {
  console.log('\nüõ†Ô∏è –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö...');

  // –ó–∞–ø—É—Å–∫–∞–µ–º ESLint —Å –ø—Ä–∞–≤–∏–ª–æ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
  runCommand(
    'npx eslint . --ext .ts,.tsx --fix --max-warnings=9999 --rule "@typescript-eslint/no-unused-vars:error"',
  );

  console.log('‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö');
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞
async function main() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫ TypeScript...');

  // –®–∞–≥ 1: –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫–∏ —Å any —Ç–∏–ø–∞–º–∏
  await fixAnyTypeErrors();

  // –®–∞–≥ 2: –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫–∏ –∏–º–ø–æ—Ä—Ç–æ–≤
  await fixImportPathErrors();

  // –®–∞–≥ 3: –î–æ–±–∞–≤–ª—è–µ–º —è–≤–Ω—ã–µ —Ç–∏–ø—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
  await addExplicitReturnTypes();

  // –®–∞–≥ 4: –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏
  await fixUnusedVariables();

  // –®–∞–≥ 5: –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–∏–ø–æ–≤, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –æ—à–∏–±–∫–∏
  const errors = await findTypeErrors();

  if (errors.length === 0) {
    console.log('\n‚ú® –í—Å–µ –æ—à–∏–±–∫–∏ TypeScript –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!');
  } else {
    console.log(
      `\n‚ö†Ô∏è –û—Å—Ç–∞–ª–æ—Å—å ${errors.length} –æ—à–∏–±–æ–∫ TypeScript, –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç —Ä—É—á–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è`,
    );
  }

  console.log('\nüìù –ü—Ä–æ—Ü–µ—Å—Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫ TypeScript –∑–∞–≤–µ—Ä—à–µ–Ω');
}

main().catch(error => {
  console.error('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});
