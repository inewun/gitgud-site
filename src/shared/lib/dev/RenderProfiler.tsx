import React, { Profiler, ProfilerOnRenderCallback, useState, useEffect } from 'react';

interface RenderProfilerProps {
  id: string;
  children: React.ReactNode;
  enabled?: boolean;
  loggingEnabled?: boolean;
}

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ–Ω–¥–µ—Ä–æ–≤
type RenderStats = {
  renders: number;
  totalRenderTime: number;
  lastRenderTime: number;
  averageRenderTime: number;
};

const statsStorage: Record<string, RenderStats> = {};

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–µ—Ä–µ–Ω–¥–µ—Ä–æ–≤
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 *
 * @param id - –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ—Ñ–∏–ª–∏—Ä—É–µ–º–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
 * @param children - –ü—Ä–æ—Ñ–∏–ª–∏—Ä—É–µ–º—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
 * @param enabled - –§–ª–∞–≥, –≤–∫–ª—é—á–∞—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–∫—Ç–∏–≤–µ–Ω —Ç–æ–ª—å–∫–æ –≤ development)
 * @param loggingEnabled - –§–ª–∞–≥, –≤–∫–ª—é—á–∞—é—â–∏–π –≤—ã–≤–æ–¥ –ª–æ–≥–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å
 */
export function RenderProfiler({
  id,
  children,
  enabled = process.env.NODE_ENV === 'development',
  loggingEnabled = false,
}: RenderProfilerProps) {
  // –ù–µ –ø—Ä–æ—Ñ–∏–ª–∏—Ä—É–µ–º –≤ production –µ—Å–ª–∏ —è–≤–Ω–æ –Ω–µ –≤–∫–ª—é—á–µ–Ω–æ
  if (!enabled) {
    return <>{children}</>;
  }

  const onRender: ProfilerOnRenderCallback = (
    profilerId,
    phase,
    actualDuration,
    baseDuration,
    _startTime,
    _commitTime,
  ) => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞, –µ—Å–ª–∏ –µ—ë –µ—â–µ –Ω–µ—Ç
    if (!(profilerId in statsStorage)) {
      statsStorage[profilerId] = {
        renders: 0,
        totalRenderTime: 0,
        lastRenderTime: 0,
        averageRenderTime: 0,
      };
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = statsStorage[profilerId];
    stats.renders += 1;
    stats.totalRenderTime += actualDuration;
    stats.lastRenderTime = actualDuration;
    stats.averageRenderTime = stats.totalRenderTime / stats.renders;

    // –õ–æ–≥–∏—Ä—É–µ–º, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
    if (loggingEnabled) {
      // eslint-disable-next-line no-console
      console.group(`%cüîç Render Profiler: ${profilerId}`, 'color: #00b3e6; font-weight: bold;');
      // eslint-disable-next-line no-console
      console.log(`Phase: ${phase}`);
      // eslint-disable-next-line no-console
      console.log(`Render #${stats.renders}`);
      // eslint-disable-next-line no-console
      console.log(`Actual time: ${actualDuration.toFixed(2)}ms`);
      // eslint-disable-next-line no-console
      console.log(`Base time: ${baseDuration.toFixed(2)}ms`);
      // eslint-disable-next-line no-console
      console.log(`Average time: ${stats.averageRenderTime.toFixed(2)}ms`);

      // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –æ —á–∞—Å—Ç—ã—Ö —Ä–µ—Ä–µ–Ω–¥–µ—Ä–∞—Ö
      if (stats.renders > 5 && stats.renders % 5 === 0) {
        // eslint-disable-next-line no-console
        console.warn(`‚ö†Ô∏è Component ${profilerId} has rendered ${stats.renders} times!`);
      }

      // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –æ –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–µ–Ω–¥–µ—Ä–∞—Ö
      if (actualDuration > 16) {
        // 16ms = ~60fps
        // eslint-disable-next-line no-console
        console.warn(`‚ö†Ô∏è Slow render detected in ${profilerId}: ${actualDuration.toFixed(2)}ms`);
      }

      // eslint-disable-next-line no-console
      console.groupEnd();
    }
  };

  return (
    <Profiler id={id} onRender={onRender}>
      {children}
    </Profiler>
  );
}

/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ–Ω–¥–µ—Ä–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
 * @param id - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
 * @returns –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–Ω–¥–µ—Ä–æ–≤ –∏–ª–∏ undefined, –µ—Å–ª–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–ª—Å—è
 */
export function getRenderStats(id: string): RenderStats | undefined {
  return statsStorage[id];
}

/**
 * –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ–Ω–¥–µ—Ä–æ–≤
 * @param id - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –æ—á–∏—â–∞–µ—Ç—Å—è –≤—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)
 */
export function clearRenderStats(id?: string): void {
  if (id) {
    if (Object.prototype.hasOwnProperty.call(statsStorage, id)) {
      // –ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete
      delete statsStorage[id];
    }
  } else {
    // –û—á–∏—â–∞–µ–º –≤—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    Object.keys(statsStorage).forEach(key => {
      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete
      delete statsStorage[key];
    });
  }
}

/**
 * HOC –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
 * @param Component - –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è
 * @param id - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ—Ñ–∏–ª—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - displayName –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞)
 * @param options - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è
 */
export function withProfiler<P extends object>(
  Component: React.ComponentType<P>,
  id?: string,
  options?: { enabled?: boolean; loggingEnabled?: boolean },
): React.FC<P> {
  const displayName = Component.displayName || Component.name || 'Component';
  const profilerId = id || `${displayName}Profiler`;

  const ProfiledComponent: React.FC<P> = props => {
    return (
      <RenderProfiler
        id={profilerId}
        enabled={options?.enabled}
        loggingEnabled={options?.loggingEnabled}
      >
        <Component {...props} />
      </RenderProfiler>
    );
  };

  ProfiledComponent.displayName = `WithProfiler(${displayName})`;

  return ProfiledComponent;
}

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ–≥–æ –¥–µ—Ä–µ–≤–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
 */
export function DevProfilerPanel() {
  const [isVisible, setIsVisible] = useState(false);
  const [stats, setStats] = useState<Record<string, RenderStats>>({});

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É, –µ—Å–ª–∏ –ø–∞–Ω–µ–ª—å –æ—Ç–∫—Ä—ã—Ç–∞
  useEffect(() => {
    if (!isVisible) return;

    const interval = setInterval(() => {
      setStats({ ...statsStorage });
    }, 1000);

    return () => {
      clearInterval(interval);
    };
  }, [isVisible]);

  if (process.env.NODE_ENV !== 'development') {
    return null;
  }

  const toggleVisibility = () => {
    setIsVisible(!isVisible);
  };

  const handleClearStats = () => {
    clearRenderStats();
    setStats({});
  };

  return (
    <>
      <button
        onClick={toggleVisibility}
        style={{
          position: 'fixed',
          bottom: '10px',
          left: '10px',
          zIndex: 9999,
          background: '#333',
          color: 'white',
          border: 'none',
          borderRadius: '4px',
          padding: '8px 12px',
          cursor: 'pointer',
        }}
      >
        {isVisible ? 'Hide Profiler' : 'Show Profiler'}
      </button>

      {isVisible && (
        <div
          style={{
            position: 'fixed',
            left: '10px',
            bottom: '50px',
            width: '300px',
            maxHeight: '400px',
            overflowY: 'auto',
            background: '#333',
            color: 'white',
            zIndex: 9999,
            padding: '16px',
            borderRadius: '4px',
            boxShadow: '0 0 10px rgba(0,0,0,0.5)',
          }}
        >
          <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '8px' }}>
            <h3 style={{ margin: 0, fontSize: '16px' }}>Render Statistics</h3>
            <button
              onClick={handleClearStats}
              style={{
                background: '#555',
                border: 'none',
                color: 'white',
                padding: '4px 8px',
                borderRadius: '4px',
                cursor: 'pointer',
              }}
            >
              Clear
            </button>
          </div>

          <table style={{ width: '100%', borderCollapse: 'collapse' }}>
            <thead>
              <tr style={{ textAlign: 'left', borderBottom: '1px solid #555' }}>
                <th style={{ padding: '4px' }}>Component</th>
                <th style={{ padding: '4px' }}>Renders</th>
                <th style={{ padding: '4px' }}>Avg Time</th>
                <th style={{ padding: '4px' }}>Last Time</th>
              </tr>
            </thead>
            <tbody>
              {Object.entries(stats).map(([id, stat]) => (
                <tr key={id} style={{ borderBottom: '1px solid #444' }}>
                  <td style={{ padding: '4px' }}>{id}</td>
                  <td style={{ padding: '4px' }}>{stat.renders}</td>
                  <td style={{ padding: '4px' }}>{stat.averageRenderTime.toFixed(1)}ms</td>
                  <td style={{ padding: '4px' }}>{stat.lastRenderTime.toFixed(1)}ms</td>
                </tr>
              ))}
              {Object.keys(stats).length === 0 && (
                <tr>
                  <td colSpan={4} style={{ textAlign: 'center', padding: '8px' }}>
                    No render data available
                  </td>
                </tr>
              )}
            </tbody>
          </table>
        </div>
      )}
    </>
  );
}
