import * as nextNavigation from 'next/navigation';

import { render, screen } from '@testing-library/react';

import { NavigationMenu } from '../navigation';

// –ú–æ–∫–∞–µ–º usePathname –∏–∑ next/navigation
jest.mock('next/navigation', () => ({
  usePathname: jest.fn(),
}));

describe('NavigationMenu', () => {
  const mockItems = [
    { href: '/', label: '–ì–ª–∞–≤–Ω–∞—è' },
    { href: '/anonymize', label: '–ê–Ω–æ–Ω–∏–º–∏–∑–∞—Ü–∏—è' },
    { href: '/docs', label: '–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è' },
  ];

  beforeEach(() => {
    jest.clearAllMocks();
  });

  it('–¥–æ–ª–∂–µ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏', () => {
    // –ú–æ–∫–∞–µ–º usePathname –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø—É—Ç–∏
    jest.spyOn(nextNavigation, 'usePathname').mockReturnValue('/');

    render(<NavigationMenu items={mockItems} />);

    expect(screen.getByText('–ì–ª–∞–≤–Ω–∞—è')).toBeInTheDocument();
    expect(screen.getByText('–ê–Ω–æ–Ω–∏–º–∏–∑–∞—Ü–∏—è')).toBeInTheDocument();
    expect(screen.getByText('–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è')).toBeInTheDocument();
  });

  it('–¥–æ–ª–∂–µ–Ω –æ—Ç–º–µ—á–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç', () => {
    // –ú–æ–∫–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—É—Ç—å –∫–∞–∫ /anonymize
    jest.spyOn(nextNavigation, 'usePathname').mockReturnValue('/anonymize');

    render(<NavigationMenu items={mockItems} />);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç—Ä–∏–±—É—Ç aria-current –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    const activeLink = screen.getByText('–ê–Ω–æ–Ω–∏–º–∏–∑–∞—Ü–∏—è').closest('a');
    expect(activeLink).toHaveAttribute('aria-current', 'page');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –Ω–µ—Ç –∞—Ç—Ä–∏–±—É—Ç–∞ aria-current
    const homeLink = screen.getByText('–ì–ª–∞–≤–Ω–∞—è').closest('a');
    const docsLink = screen.getByText('–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è').closest('a');

    expect(homeLink).not.toHaveAttribute('aria-current');
    expect(docsLink).not.toHaveAttribute('aria-current');
  });

  it('–¥–æ–ª–∂–µ–Ω –ø—Ä–∏–º–µ–Ω—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∫–ª–∞—Å—Å', () => {
    jest.spyOn(nextNavigation, 'usePathname').mockReturnValue('/');

    render(<NavigationMenu items={mockItems} className="custom-nav-class" />);

    // –ù–∞—Ö–æ–¥–∏–º –∫–æ—Ä–Ω–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç nav
    const navElement = screen.getByRole('navigation');
    expect(navElement).toHaveClass('custom-nav-class');
  });

  it('–¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Å—Å—ã–ª–∫–∏ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ href', () => {
    jest.spyOn(nextNavigation, 'usePathname').mockReturnValue('/');

    render(<NavigationMenu items={mockItems} />);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã href —É —Å—Å—ã–ª–æ–∫
    const links = screen.getAllByRole('link');

    expect(links[0]).toHaveAttribute('href', '/');
    expect(links[1]).toHaveAttribute('href', '/anonymize');
    expect(links[2]).toHaveAttribute('href', '/docs');
  });

  it('–¥–æ–ª–∂–µ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –∏–∫–æ–Ω–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã', () => {
    const itemsWithIcons = [
      { href: '/', label: '–ì–ª–∞–≤–Ω–∞—è', icon: <span data-testid="home-icon">üè†</span> },
      {
        href: '/anonymize',
        label: '–ê–Ω–æ–Ω–∏–º–∏–∑–∞—Ü–∏—è',
        icon: <span data-testid="anonymize-icon">üîí</span>,
      },
    ];

    jest.spyOn(nextNavigation, 'usePathname').mockReturnValue('/');

    render(<NavigationMenu items={itemsWithIcons} />);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∫–æ–Ω–æ–∫
    expect(screen.getByTestId('home-icon')).toBeInTheDocument();
    expect(screen.getByTestId('anonymize-icon')).toBeInTheDocument();
  });

  it('–¥–æ–ª–∂–µ–Ω —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏', () => {
    jest.spyOn(nextNavigation, 'usePathname').mockReturnValue('/');

    render(<NavigationMenu items={mockItems} />);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    const navElement = screen.getByRole('navigation');
    expect(navElement).toHaveAttribute('aria-label', '–û—Å–Ω–æ–≤–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º aria-label –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Å—ã–ª–∫–∏
    mockItems.forEach(item => {
      const link = screen.getByText(item.label).closest('a');
      expect(link).toHaveAttribute('aria-label', item.label);
    });
  });
});
